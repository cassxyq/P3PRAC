pipeline {
    agent any

    options {
        ansiColor('xterm')
    }

    environment {
        AWS_CRED = "casstest"
        WORKDIR = "./backend/containertest"
        AWS_REGION = "ap-southeast-2"
        AWS_ACCOUNTID = "327746137438"
        IMAGE_NAME = "prac"
        IMAGE_TAG =  "${GIT_COMMIT_MSG}" //"${GIT_COMMIT}" //
        ECR_REPO_NAME = "ecsprac"
        ECR_PREFIX_URL = "${AWS_ACCOUNTID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    }

    stages {
        stage("GitCommitExtract"){
            steps {
                script{
                    env.GIT_COMMIT_MSG = sh (script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }

        stage("LoginECR"){
            steps {
                withAWS(credentials: 'casstest', region: 'ap-southeast-2'){
                    sh "aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${ECR_PREFIX_URL}"
                }
            }
        }

        stage("BuildImage"){
            steps {
                dir(WORKDIR){
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage("TagImage"){
            steps {
                dir(WORKDIR){
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ECR_PREFIX_URL}/${ECR_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage("PushImage"){
            steps {
                dir(WORKDIR){
                    withAWS(credentials: 'casstest', region: 'ap-southeast-2'){
                        sh "docker push ${ECR_PREFIX_URL}/${ECR_REPO_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        /*stage("UpdateTaskDefinition"){
            steps {
                dir(WORKDIR){
                    withAWS(credentials: 'casstest', region: 'ap-southeast-2'){
                        sh ""
                    }
                }
            }
        }*/

    }





    post {
        always{
            cleanWs()
        }

        /*success{
            emailext body: '$DEFAULT_CONTENT', subject: '$DEFAULT_SUBJECT', to: '$DEFAULT_RECIPIENTS'
        }

        failure{
            emailext body: '$DEFAULT_CONTENT', subject: '$DEFAULT_SUBJECT', to: '$DEFAULT_RECIPIENTS'
        }*/
    
    }
}